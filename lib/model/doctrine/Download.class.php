<?php

/*
 * Copyright (c) 2016, webvariants GmbH <?php Co. KG, http://www.webvariants.de
 *
 * This file is released under the terms of the MIT license. You can find the
 * complete text in the attached LICENSE file or online at:
 *
 * http://www.opensource.org/licenses/mit-license.php
 */

/**
 * Download
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Download extends BaseDownload {

  const PAGE_SIZE = 5000;

  public static $EXCLUDE = array(
      false => array(
          Petition::FIELD_EMAIL,
          Petition::FIELD_ADDRESS,
//          Petition::FIELD_COMMENT,
          Petition::FIELD_EMAIL_SUBJECT,
          Petition::FIELD_EMAIL_BODY,
          Petition::FIELD_PRIVACY
      ),
      true => array(
          Petition::FIELD_SUBSCRIBE,
          Petition::FIELD_COMMENT,
          Petition::FIELD_EMAIL_SUBJECT,
          Petition::FIELD_EMAIL_BODY,
          Petition::FIELD_PRIVACY
      )
  );

  public function calcPages() {
    return ceil($this->getCount() / self::PAGE_SIZE);
  }

  public function getIdForType() {
    switch ($this->getType()) {
      case 'petition':
        return $this->getPetitionId();
      case 'campaign':
        return $this->getCampaignId();
      case 'widget':
        return $this->getWidgetId();
    }
  }

  public function createFilename() {
    $this->setFilename($this->getId() . '_' . $this->getUser()->getId() . '_' . $this->getType() . '_' . $this->getIdForType() . '_' . time() . '.csv');
  }

  public function getFilepath() {
    return self::buildFilepath($this->getFilename());
  }

  public function fileExists() {
    return $this->getFilename() && file_exists($this->getFilepath());
  }

  public function fileDelete() {
    if ($this->fileExists()) {
      unlink($this->getFilepath());
    }
  }

  private static function buildFilepath($filename) {
    $dir = sfConfig::get('sf_data_dir') . '/csv_downloads';
    @mkdir($dir, 0777, true);
    return $dir . '/' . $filename;
  }

  public function getDownloadFilename() {
    $ret = '';

    if ($this->getCampaignId()) {
      $ret .= 'Campaign_' . $this->getCampaignId() . '_';
    }

    if ($this->getPetitionId()) {
      $ret .= 'Petition_' . $this->getPetitionId() . '_';
    }

    if ($this->getWidgetId()) {
      $ret .= 'Widget_' . $this->getWidgetId() . '_';
    }

    return $ret . strtr($this->getCreatedAt(), ' ', '_') . '.csv';
  }

  public function setQuery($query) {
    $dqlQuery = $query->copy()
      ->select('ps.*, w.id, w.petition_text_id, pt.id, pt.language_id');
    $dql = $dqlQuery->getDql();
    $dqlParams = $dqlQuery->getFlattenedParams();

    $this->setFilter(json_encode(array(
        'type' => 'DQL',
        'dql' => $dql,
        'params' => $dqlParams
    )));
  }

  public function executeQuery($limit, $offset) {
    $filter = $this->getFilter();
    if (is_string($filter)) {
      $filter = json_decode($filter, true);
      if (is_array($filter) && array_key_exists('type', $filter) && $filter['type'] === 'DQL') {
        $query = Doctrine_Query::create();
        $query->useQueryCache(null);
        $query->useResultCache(null);
        $res = $query->query($filter['dql'] . " LIMIT $limit OFFSET $offset", $filter['params'], Doctrine_Core::HYDRATE_ARRAY);
        $query->free();

        return $res;
      }
    }
  }

  public function writeCsv($page = 0) {
    $filename = $this->getFilepath();
    $subscribers = (boolean) $this->getSubscriber();
    $petition = $this->getPetitionId() ? $this->getPetition() : null;
    $out = fopen($filename, 'a+');
    $formfields = $petition ? $petition->getFormfields() : array_keys(Petition::$FIELD_SHOW);
    $exclude = self::$EXCLUDE[$subscribers];
    $used_fields = array(
        'created_at' => 0,
        'updated_at' => 1,
        'status' => 2
    );
    $blank = array('', '', '');
    $widget_id_to_language_id = array();

    if (!$subscribers) {
      $used_fields['verified'] = count($used_fields);
    }
    if ($petition->getKind() == Petition::KIND_OPENECI) {
      $used_fields['thank you page shown'] = count($used_fields);
    }

    ini_set('max_execution_time', 600);
    set_time_limit(120);

    $petition_signings = $this->executeQuery(self::PAGE_SIZE, self::PAGE_SIZE * $page);
    $i = 0;
    foreach ($petition_signings as $petition_signing) { /* @var $petition_signing PetitionSigning */
      $widget_id = $petition_signing['widget_id'];
      $cell = $blank;
      $cell[0] = $petition_signing['created_at'];
      $cell[1] = $petition_signing['updated_at'];
      $status = (int) $petition_signing['status'];
      $cell[2] = array_key_exists($status, PetitionSigning::$STATUS_SHOW) ? PetitionSigning::$STATUS_SHOW[$status] : $status;
      $cell[3] = $petition_signing['verified'] == Petition::VALIDATION_REQUIRED_YES ? 'yes' : 'no';

      if ($petition->getKind() == Petition::KIND_OPENECI) {
        $cell[$used_fields['thank you page shown']] = $petition_signing['ref_shown'] ? 'yes' : 'no';
      }

      foreach ($formfields as $formfield) {
        if (!in_array($formfield, $exclude)) {
          $value = $petition_signing[$formfield];
          if (!array_key_exists($formfield, $used_fields)) {
            $used_fields[$formfield] = count($used_fields);
            $blank[] = '';
          }
          $cell[$used_fields[$formfield]] = $value;
        }
      }
      if (!array_key_exists(Petition::FIELD_REF, $used_fields)) {
        $used_fields[Petition::FIELD_REF] = count($used_fields);
        $blank[] = '';
        $used_fields['widget_id'] = count($used_fields);
        $blank[] = '';
        $used_fields['language_id'] = count($used_fields);
        $blank[] = '';
        if (!$subscribers) {
          $used_fields['hash'] = count($used_fields);
          $blank[] = '';
        }
      }
      $cell[$used_fields[Petition::FIELD_REF]] = $petition_signing[Petition::FIELD_REF];
      $cell[$used_fields['widget_id']] = $widget_id;
      $language_id = '';
      if ($widget_id) {
        if (!array_key_exists($widget_id, $widget_id_to_language_id)) {
          $widget_id_to_language_id[$widget_id] = $petition_signing['language_id'];
        }

        $language_id = $widget_id_to_language_id[$widget_id];
      }
      $cell[$used_fields['language_id']] = $language_id;
      if (!$subscribers) {
        $cell[$used_fields['hash']] = $petition_signing['email_hash'] ? : UtilEmailHash::hash($petition_signing[Petition::FIELD_EMAIL]);
      }

      if ($i === 0 && $page === 0) {
        fwrite($out, "\xEF\xBB\xBF");
        fputcsv($out, array_keys($used_fields), ';');
      }

      fputcsv($out, $cell, ';');
      $i++;
    }

    unset($petition_signings);

    fclose($out);
  }

}
